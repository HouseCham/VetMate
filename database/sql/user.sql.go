// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const checkUserEmailExists = `-- name: CheckUserEmailExists :one
SELECT COUNT(*)
FROM usuarios
WHERE email = ?
`

func (q *Queries) CheckUserEmailExists(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserEmailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertNewUser = `-- name: InsertNewUser :exec
INSERT INTO usuarios(
    nombre,
    apellido_p,
    apellido_m,
    email,
    telefono,
    password_hash
) VALUES (?, ?, ?, ?, ?, ?)
`

type InsertNewUserParams struct {
	Nombre       string         `json:"nombre"`
	ApellidoP    string         `json:"apellido_p"`
	ApellidoM    string         `json:"apellido_m"`
	Email        string         `json:"email"`
	Telefono     sql.NullString `json:"telefono"`
	PasswordHash string         `json:"password_hash"`
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) error {
	_, err := q.db.ExecContext(ctx, insertNewUser,
		arg.Nombre,
		arg.ApellidoP,
		arg.ApellidoM,
		arg.Email,
		arg.Telefono,
		arg.PasswordHash,
	)
	return err
}
