// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: vet_place.sql

package db

import (
	"context"
)

const checkVetPlaceNameExists = `-- name: CheckVetPlaceNameExists :one
SELECT COUNT(*)
FROM sucursales
WHERE nombre_sucursal = ?
`

func (q *Queries) CheckVetPlaceNameExists(ctx context.Context, nombreSucursal string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkVetPlaceNameExists, nombreSucursal)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteVetPlace = `-- name: DeleteVetPlace :exec
UPDATE sucursales
SET fecha_delete = DATE_SUB(NOW(), INTERVAL 6 HOUR)
WHERE id = ?
`

func (q *Queries) DeleteVetPlace(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteVetPlace, id)
	return err
}

const insertNewVetPlace = `-- name: InsertNewVetPlace :exec
INSERT INTO sucursales (nombre_sucursal, token)
VALUES (?, ?)
`

type InsertNewVetPlaceParams struct {
	NombreSucursal string `json:"nombre_sucursal"`
	Token          string `json:"token"`
}

func (q *Queries) InsertNewVetPlace(ctx context.Context, arg InsertNewVetPlaceParams) error {
	_, err := q.db.ExecContext(ctx, insertNewVetPlace, arg.NombreSucursal, arg.Token)
	return err
}

const updateVetPlace = `-- name: UpdateVetPlace :exec
UPDATE sucursales
SET nombre_sucursal = ?
WHERE id = ?
`

type UpdateVetPlaceParams struct {
	NombreSucursal string `json:"nombre_sucursal"`
	ID             int32  `json:"id"`
}

func (q *Queries) UpdateVetPlace(ctx context.Context, arg UpdateVetPlaceParams) error {
	_, err := q.db.ExecContext(ctx, updateVetPlace, arg.NombreSucursal, arg.ID)
	return err
}
